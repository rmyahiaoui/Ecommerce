require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe ProduitsController do

  def mock_produit(stubs={})
    @mock_produit ||= mock_model(Produit, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all produits as @produits" do
      Produit.stub(:all) { [mock_produit] }
      get :index
      assigns(:produits).should eq([mock_produit])
    end
  end

  describe "GET show" do
    it "assigns the requested produit as @produit" do
      Produit.stub(:find).with("37") { mock_produit }
      get :show, :id => "37"
      assigns(:produit).should be(mock_produit)
    end
  end

  describe "GET new" do
    it "assigns a new produit as @produit" do
      Produit.stub(:new) { mock_produit }
      get :new
      assigns(:produit).should be(mock_produit)
    end
  end

  describe "GET edit" do
    it "assigns the requested produit as @produit" do
      Produit.stub(:find).with("37") { mock_produit }
      get :edit, :id => "37"
      assigns(:produit).should be(mock_produit)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created produit as @produit" do
        Produit.stub(:new).with({'these' => 'params'}) { mock_produit(:save => true) }
        post :create, :produit => {'these' => 'params'}
        assigns(:produit).should be(mock_produit)
      end

      it "redirects to the created produit" do
        Produit.stub(:new) { mock_produit(:save => true) }
        post :create, :produit => {}
        response.should redirect_to(produit_url(mock_produit))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved produit as @produit" do
        Produit.stub(:new).with({'these' => 'params'}) { mock_produit(:save => false) }
        post :create, :produit => {'these' => 'params'}
        assigns(:produit).should be(mock_produit)
      end

      it "re-renders the 'new' template" do
        Produit.stub(:new) { mock_produit(:save => false) }
        post :create, :produit => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested produit" do
        Produit.stub(:find).with("37") { mock_produit }
        mock_produit.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :produit => {'these' => 'params'}
      end

      it "assigns the requested produit as @produit" do
        Produit.stub(:find) { mock_produit(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:produit).should be(mock_produit)
      end

      it "redirects to the produit" do
        Produit.stub(:find) { mock_produit(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(produit_url(mock_produit))
      end
    end

    describe "with invalid params" do
      it "assigns the produit as @produit" do
        Produit.stub(:find) { mock_produit(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:produit).should be(mock_produit)
      end

      it "re-renders the 'edit' template" do
        Produit.stub(:find) { mock_produit(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

#  describe "DELETE destroy" do
#    it "destroys the requested produit" do
#      Produit.stub(:find).with("37") { mock_produit }
#      mock_produit.should_receive(:destroy)
#      delete :destroy, :id => "37"
#    end
#
#    it "redirects to the produits list of categori" do
#      Produit.stub(:find) { mock_produit }
#      delete :destroy, :id => "1"
#      response.should redirect_to(produits_url)
#      response.should redirect_to({:controller => "categoris", :action => "listProduit", :categori => "1"})
#    end
#  end

end
